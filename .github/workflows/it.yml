name: IT
on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:
  push:
    branches:
      - 'prod'
  pull_request:
    branches:
      - 'prod'

env:
  AWS_REGION: eu-west-3
  REACT_APP_BPARTNERS_API_URL: https://api.preprod.bpartners.app
  REACT_APP_ANNOTATOR_GEO_MERCATOR_API_URL: https://1gup5vvyyg.execute-api.eu-west-3.amazonaws.com/Prod/mercator
  REACT_APP_ANNOTATOR_GEO_PIXEL_API_URL: https://1gup5vvyyg.execute-api.eu-west-3.amazonaws.com/Prod/pixel
  REACT_APP_GEO_DETECTION_API: https://qncd60qbk0.execute-api.eu-west-3.amazonaws.com

jobs:
  test-it:
    timeout-minutes: 50
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1.0.3
        with:
          version: 2
          verbose: false
          arch: amd64
          rootdir: ''
          workdir: ''
      - name: Connect to Bpartners typescript client AWS CodeArtifact
        run: |
          sh ./initAWS.sh bpartners ${{ secrets.BPARTNERS_TS_CLIENT_AWS_ACCESS_KEY_ID }} ${{ secrets.BPARTNERS_TS_CLIENT_AWS_SECRET_ACCESS_KEY }} ${{ env.AWS_REGION }}
          sh ./initNpmrc.sh bpartners bpartners-store npm-bpartners-app ${{ secrets.BP_CLIENT_AWS_ID }}

      - name: Connect to BPartners annotator client AWS CodeArtifact
        run: |
          sh ./initAWS.sh imagery ${{ secrets.BPARTNERS_ANNOTATOR_CLIENT_AWS_ACCESS_KEY_ID }} ${{ secrets.BPARTNERS_ANNOTATOR_CLIENT_AWS_SECRET_ACCESS_KEY }} ${{ env.AWS_REGION }}
          sh ./initNpmrc.sh imagery annotator-imagery-store npm-bpartners-imagery-app ${{ secrets.BP_ANNOTATOR_AWS_ID }}

      - run: npm install --legacy-peer-deps

      - name: Run IT
        run: |
          echo REACT_PROD_API_KEY=${{ secrets.REACT_PROD_API_KEY }} > .env
          echo REACT_IT_TEST_EMAIL=${{ secrets.REACT_IT_TEST_EMAIL }} >> .env
          echo REACT_IT_TEST_PHONE=${{ secrets.REACT_IT_TEST_PHONE }} >> .env
          if [ "${{ secrets.RUN_IT }}" = "1" ]; then
            npm run it
          fi
          
      - name: Check previous test status
        id: check-instatus
        run: |
          response=$(curl -s -X GET "${{ secrets.INSTATUS_STATUS_URL }}")

          instatusId=$(echo "$response" | jq -r '.instatusId')
          isResolve=$(echo "$response" | jq -r '.isResolve')

          echo "instatusId=$instatusId" >> $GITHUB_ENV
          echo "isResolve=$isResolve" >> $GITHUB_ENV

      - name: Resolve last Instatus if there was an error
        if: success() && env.isResolve == 'false'
        run: |
          curl -X POST https://api.instatus.com/v2/${{ secrets.INSTATUS_ROOF_PAGE_ID }}/incidents/${{ env.instatusId }}/incident-updates/${{ secrets.INSTATUS_ROOF_WEBSITE_EXCEPTION_RESOLVE_TEMPLATE_ID }}
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.INSTATUS_API_KEY }}"

          curl -X PUT "${{ secrets.INSTATUS_STATUS_URL }}"

      - name: Instatus request
        if: failure() && github.event_name == 'schedule' && github.ref == 'refs/heads/prod'
        run: |
          response=$(curl -s -X POST "https://api.instatus.com/v1/${{ secrets.INSTATUS_ROOF_PAGE_ID }}/incidents/${{ secrets.INSTATUS_ROOF_WEBSITE_EXCEPTION_TEMPLATE_ID }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.INSTATUS_API_KEY }}")

          currentIncidentId=$(echo "$response" | jq -r '.id')

          curl -s -X POST "${{ secrets.INSTATUS_STATUS_URL }}/${currentIncidentId}"
